my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf -Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na[x]&x>0]
x[!is.na(x) & x>0]
?c
c([1],[5],[7])
c(1,5,7)
c[(3,5,7)]
c(3,5,7)
[c(3,5,7)]
x<-[c(3,5,7)]
c(3,5,7)
a<-c(3,5,7)
a<-[c(3,5,7)]
a<-c[(3,5,7)]
a<-c([3,5,7])
c([3,5,7])
c([3],[5],[7])
info()
[x]<-c(3,5,7)
[x]<-c(3,5,7)
x[c(3, 5, 7)]
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!==7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE &&& c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints<0)
all(ints>0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(cls_list)
?sapply
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
## The following is a pair of functions that cache and compute the
makeCacheMatrix
makeCacheMatrix()
source('E:/coursera/R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix
makeCacheMatrix
getdata.data.ss06hid <- read.csv("E:/coursera/module 3/getdata-data-ss06hid.csv")
View(getdata.data.ss06hid)
install.packages(descr)
install.packages(qdap)
install.packages('qda[')
install.packages('qdap')
install.packages(descr)
install.packages('descr')
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(datasets)
data(cars)
with(cars, ggplot(speed, dist))
library(ggplot)library(datasets)
data(cars)
with(cars, ggplot(speed, dist))
library("ggplot2", lib.loc="E:/R/R-3.1.3/library")
library(datasets)
data(cars)
with(cars, ggplot(speed, dist))
library(datasets)
data(cars)
with(cars, ggplot(aes(speed, dist))
data(iris)
table.iris = table(iris$Species)
pie(table.iris)
hist(iris$Sepal.Length)
boxplot(Petal.Width ~ Species, data = iris)
plot(x=iris$Petal.Length, y=iris$Petal.Width, col=iris$Species)
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red1", "green3", "blue2")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red1", "green3", "blue2")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red", "green2", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red", "green2", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red", "green4", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red", "green5", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red", "green2", "blue")[unclass(iris$Species)])
pairs(iris[1:4], main = "Anthony Yeo's Iris Data", pch = 21, bg = c("red", "green2", "blue3")[unclass(iris$Species)])
source('E:/coursera/machine language R/xdf-import-.r', echo=TRUE)
install.packages("Corpus")
install.packages("C:\\Users\\sspwty\\Downloads\kernlab_0.9-20.zip", repos=NULL)
install.packages("C:\\Users\\sspwty\\Downloads\\kernlab_0.9-20.zip", repos=NULL)
library("kernlab")
q()
library("kernlab")
library("ggplot2")
library("Amelia", lib.loc="E:/R/R-3.1.3/library")
install.packages("knit2html()")
install.packages("knitr")
library("knitr")
library("plyr", lib.loc="E:/R/R-3.1.3/library")
setwd("E:/coursera/ReproducibleResearch/RepData_PeerAssessment1")
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
options(scipen = 1)  # Turn off scientific notations for numbers
### Unzip and read csv file
```{r}
unzip("activity.zip")
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
data$date <- as.date(activity$date)
activitysummary <-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
acttemp<-activity[complete.cases(activity),]
acttemp$time<-strptime((sapply(acttemp$interval, formatC, width = 4, flag = 0)), format = "%H%M")
acttemp$time <- format(acttemp$time,"%H:%M")
activitysummarytmp<-ddply(acttemp, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsummarytmp<-ddply(acttemp, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
library(ggplot2)
install.packages("date")
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
options(scipen = 1)  # Turn off scientific notations for numbers
### Unzip and read csv file
```{r}
unzip("activity.zip")
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
data$date <- as.date(activity$date)
activitysummary <-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
acttemp<-activity[complete.cases(activity),]
acttemp$time<-strptime((sapply(acttemp$interval, formatC, width = 4, flag = 0)), format = "%H%M")
acttemp$time <- format(acttemp$time,"%H:%M")
activitysummarytmp<-ddply(acttemp, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsummarytmp<-ddply(acttemp, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
library(ggplot2)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
options(scipen = 1)  # Turn off scientific notations for numbers
### Unzip and read csv file
```{r}
unzip("activity.zip")
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
data$date <- as.date(activity$date)
activitysummary <-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
acttemp<-activity[complete.cases(activity),]
acttemp$time<-strptime((sapply(acttemp$interval, formatC, width = 4, flag = 0)), format = "%H%M")
acttemp$time <- format(acttemp$time,"%H:%M")
activitysummarytmp<-ddply(acttemp, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsummarytmp<-ddply(acttemp, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
library(ggplot2)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
options(scipen = 1)  # Turn off scientific notations for numbers
### Unzip and read csv file
```{r}
unzip("activity.zip")
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
data$date <- as.date(activity$date)
activitysummary <-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
acttemp<-activity[complete.cases(activity),]
acttemp$time<-strptime((sapply(acttemp$interval, formatC, width = 4, flag = 0)), format = "%H%M")
acttemp$time <- format(acttemp$time,"%H:%M")
activitysummarytmp<-ddply(acttemp, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsummarytmp<-ddply(acttemp, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
library(ggplot2)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
data$date <- as.date(activity$date)
activitysummary <-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
acttemp<-activity[complete.cases(activity),]
acttemp$time<-strptime((sapply(acttemp$interval, formatC, width = 4, flag = 0)), format = "%H%M")
acttemp$time <- format(acttemp$time,"%H:%M")
activitysummarytmp<-ddply(acttemp, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsummarytmp<-ddply(acttemp, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
library(ggplot2)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
activity$date <- as.date(activity$date)
activitysummary <-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
acttemp<-activity[complete.cases(activity),]
acttemp$time<-strptime((sapply(acttemp$interval, formatC, width = 4, flag = 0)), format = "%H%M")
acttemp$time <- format(acttemp$time,"%H:%M")
activitysummarytmp<-ddply(acttemp, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsummarytmp<-ddply(acttemp, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
library(ggplot2)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
activity$date <- as.date(activity$date,"%d/%m/%y")
activitysummary <-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
acttemp<-activity[complete.cases(activity),]
acttemp$time<-strptime((sapply(acttemp$interval, formatC, width = 4, flag = 0)), format = "%H%M")
acttemp$time <- format(acttemp$time,"%H:%M")
activitysummarytmp<-ddply(acttemp, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsummarytmp<-ddply(acttemp, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
library(ggplot2)
View(activity)
View(activity)
View(acttemp)
View(data)
View(getdata.data.ss06hid)
View(data)
View(acttemp)
View(activity)
activity$date <- as.date(activity$date,"%d/%m/%y")
library("plyr")
library("date")
activity$month <- as.numeric(format(activity$date, "%d/%m/%y"))
View(activity)
View(acttemp)
View(data)
View(getdata.data.ss06hid)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
activity$month <- as.numeric(format(activity$date, "%d/%m/%y"))
### Omit NA data
omitNA <- na.omit(activity)
rownames(omitNA) <- 1:nrow(omitNA)
head(omitNA)
dim(omitNA)
library(ggplot2)
View(omitNA)
View(getdata.data.ss06hid)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
activity$month <- as.numeric(format(activity$date, "%d/%m/%y"))
### Omit NA data
omitNA <- na.omit(activity)
rownames(omitNA) <- 1:nrow(omitNA)
head(omitNA)
dim(omitNA)
library(ggplot2)
### What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
* Make a histogram of the total number of steps taken each day
```{r}
ggplot(omitNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
omitNA <- na.omit(activity)
View(omitNA)
View(omitNA)
omitNA <- na.omit(activity)
View(omitNA)
View(omitNA)
omitNA <- na.fail(activity)
omitNA <- na.omit(activity)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
library("plyr")
library("date")
activity$month <- as.numeric(format(activity$date, "%d/%m/%y"))
### Omit NA data
omitNA <- na.omit(activity)
rownames(omitNA) <- 1:nrow(omitNA)
head(omitNA)
dim(omitNA)
library(ggplot2)
### What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
* Make a histogram of the total number of steps taken each day
```{r}
ggplot(omitNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
omitNA <- na.omit(activity)
omitNA <- na.omit(activity)
noNA <- na.omit(activity)
View(noNA)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
activity$month <- as.numeric(format(activity$date, "%d/%m/%y"))
removeNA <- na.omit(activity)
View(activity)
View(activity)
### Set echo to true
```{r}
echo = TRUE  # Always make code visible
### Unzip and read csv file
```{r}
activity <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
### Process data from csv file
activity$month <- as.numeric(format(activity$date, "%m"))
View(activity)
View(activity)
activity$month <- as.numeric(format(activity$date, "%m"))
### Omit NA data
removeNA <- na.omit(activity)
rownames(omitNA) <- 1:nrow(omitNA)
head(omitNA)
dim(omitNA)
library(ggplot2)
removeNA <- na.omit(activity)
rownames(removeNA) <- 1:nrow(removeNA)
head(removeNA)
dim(removeNA)
library(ggplot2)
View(removeNA)
View(removeNA)
ggplot(omitNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(removeNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
* Calculate and report the mean and median total number of steps taken per day
Mean total number of steps taken per day:
```{r}
totalSteps <- aggregate(removeNA$steps, list(Date = removeNA$date), FUN = "sum")$x
mean(totalSteps)
```
Median total number of steps taken per day:
```{r}
median(totalSteps)
totalSteps <- aggregate(removeNA$steps, list(Date = removeNA$date), FUN = "sum")$x
mean(totalSteps)
median(totalSteps)
avgSteps <- aggregate(removeNA$steps, list(interval = as.numeric(as.character(noNA$interval))), FUN = "mean")
names(avgSteps)[2] <- "meanOfSteps"
avgSteps <- aggregate(removeNA$steps, list(interval = as.numeric(as.character(removeNA$interval))), FUN = "mean")
names(avgSteps)[2] <- "meanOfSteps"
avgSteps <- aggregate(removeNA$steps, list(interval = as.numeric(as.character(removeNA$interval))), FUN = "mean")
names(avgSteps)[2] <- "meanOfSteps"
ggplot(avgSteps, aes(interval, meanOfSteps)) + geom_line(color = "steelblue", size = 0.8) + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
avgSteps[avgSteps$meanOfSteps == max(avgSteps$meanOfSteps), ]
sum(is.na(activity))
```
* Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
I used the strategy of imputing the NA value with that of 5-minute interval.
* Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
imputeddata <- activity
for (i in 1:nrow(imputeddata)) {
if (is.na(imputeddata$steps[i])) {
imputeddata$steps[i] <- avgSteps[which(imputeddata$interval[i] == avgSteps$interval), ]$meanOfSteps
}
}
head(imputeddata)
sum(is.na(imputeddata))
sum(is.na(activity))
imputeddata <- activity
for (i in 1:nrow(imputeddata)) {
if (is.na(imputeddata$steps[i])) {
imputeddata$steps[i] <- avgSteps[which(imputeddata$interval[i] == avgSteps$interval), ]$meanOfSteps
}
}
head(imputeddata)
ggplot(imputeddata, aes(date, steps)) + geom_bar(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day (no missing data)", x = "Date", y = "Total number of steps")
ggplot(imputeddata, aes(date, steps)) + geom_bar(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day using Imputed Data", x = "Date", y = "Total number of steps")
knit2html(input = "E:\\coursera\\ReproducibleResearch\\RepData_PeerAssessment1\\PA1_template.Rmd")
knit2html(input = "E:\\coursera\\ReproducibleResearch\\RepData_PeerAssessment1\\PA1_template.Rmd")
knit2html(input = "E:\\coursera\\ReproducibleResearch\\RepData_PeerAssessment1\\PA1_template.Rmd")
